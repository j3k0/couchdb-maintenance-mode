#!/bin/bash
set -e

echo "Checking dependencies..."
if ! which whiptail > /dev/null; then
  echo "ERROR: whiptail not found. Please install whiptail or fix your PATH."
  exit 1
fi

if ! which curl > /dev/null; then
  echo "ERROR: curl not found. Please install curl or fix your PATH."
  exit 1
fi
echo "All good."

#
# CouchDB cluster node should have a consistant naming, like:
#
# couchdb@host-1.localdomain, couchdb@host-2.localdomain, couchdb@host-3.localdomain
#
# Set COUCHDB_NODE_USER, COUCHDB_NODE_SUFFIX, COUCHDB_NODES to match your setup.
#
COUCHDB_NODE_USER="${COUCHDB_NODE_USER:-couchdb}"
COUCHDB_NODE_SUFFIX="${COUCHDB_NODE_SUFFIX:-.localdomain}"
COUCHDB_NODES="${COUCHDB_NODES:- host-1 host-2 host-3}"

# Compute the number of nodes
NUM_NODES=0
for i in $COUCHDB_NODES; do NUM_NODES=$((NUM_NODES + 1)); done

if [ -z "$COUCH_URL" ]; then
	echo "Please \$COUCH_URL to the admin URL (containing user and password)"
	exit 1
fi

CURL='/usr/bin/curl -s -H "Content-type: application/json"'

function get_maintenance_mode() {
	NODE="$1"
	$CURL "$COUCH_URL/_node/$COUCHDB_NODE_USER@$NODE$COUCHDB_NODE_SUFFIX/_config/couchdb/maintenance_mode" > .maintenance_mode
	if cat .maintenance_mode | grep error >/dev/null; then
		if cat .maintenance_mode | grep 'unknown_config_value' > /dev/null; then
			echo ""
		else
			cat .maintenance_mode | jq --raw-output '"ERROR: " + .reason'
		fi
	else
		cat .maintenance_mode | tr -d \"
	fi
}
 
function set_maintenance_mode() {
	NODE="$1"
	VALUE="$2"
	echo "$(date --iso-8601=minutes) $NODE maintenance_mode $(get_maintenance_mode $NODE) > $VALUE" | tee -a maintenance_mode.log
	$CURL "$COUCH_URL/_node/$COUCHDB_NODE_USER@$NODE$COUCHDB_NODE_SUFFIX/_config/couchdb/maintenance_mode" -X PUT -d "\"$VALUE\"" > /dev/null
}

while true
do
	echo '#!/bin/bash' > .menu
	echo "whiptail --menu \"Change maintenance_mode\" 20 100 $NUM_NODES \\" >> .menu
	for I in $COUCHDB_NODES; do
		if echo "$(get_maintenance_mode "$I")" | grep ERROR > /dev/null; then
			echo "$I \": $(get_maintenance_mode "$I")\" \\" >> .menu
		else
			echo "$I \": maintenance_mode=\\\"$(get_maintenance_mode "$I")\\\"\" \\" >> .menu
		fi
	done
	echo '2> .target_node' >> .menu
	chmod +x .menu
	./.menu
	TARGET_NODE="$(cat .target_node)"

	case "$TARGET_NODE" in
		[a-z]*)
			whiptail --menu "Net mode" 20 130 3 \
				true ": The node will not respond to clustered requests from other nodes and the /_up endpoint will return a 404 response." \
				nolb ": The /_up endpoint will return a 404 response." \
				false ": The node responds normally, /_up returns a 200 response." \
				2> .target_value
			TARGET_VALUE="$(cat .target_value)"
			if [ "$TARGET_VALUE" != cancel ] && [ ! -z "$TARGET_VALUE" ]; then
				set_maintenance_mode $TARGET_NODE $TARGET_VALUE
			fi
			;;
		*)	exit 0;;
	esac
	sleep 1
done

